class InversionCount {
private static int mergeAndCount(int[] arr, int[] temp, int left, int mid, int right) {
int i = left, j = mid + 1, k = left;
int invCount = 0;

while (i &lt;= mid &amp;&amp; j &lt;= right) {
if (arr[i] &lt;= arr[j]) {
temp[k++] = arr[i++];
} else {
temp[k++] = arr[j++];
invCount += (mid - i + 1);
}
}

while (i &lt;= mid) {
temp[k++] = arr[i++];
}

while (j &lt;= right) {
temp[k++] = arr[j++];
}

for (i = left; i &lt;= right; i++) {
arr[i] = temp[i];
}

return invCount;
}
private static int mergeSortAndCount(int[] arr, int[] temp, int left, int right) {
int invCount = 0;
if (left &lt; right) {
int mid = (left + right) / 2;
invCount += mergeSortAndCount(arr, temp, left, mid);
invCount += mergeSortAndCount(arr, temp, mid + 1, right);
invCount += mergeAndCount(arr, temp, left, mid, right);
}
return invCount;
}

public static int countInversions(int[] arr) {
int[] temp = new int[arr.length];
return mergeSortAndCount(arr, temp, 0, arr.length - 1);
}

public static void main(String[] args) {
int[] P = {30, 45, 25, 60, 20};
System.out.println(&quot;The inversion count is &quot; + countInversions(P));
}
}
